/** * @file VideoDecoderTests.swift * @brief FFmpeg video decoder Unit Tests * @author BlackboxPlayer Team * * @details * FFmpeg video decoder(VideoDecoder) functionality Verify Unit Tests. * initialization, frame decoding,, error, Memory management,. * * @section video_decoder_overview What is a video decoder? * * VideoDecoder file Display on screen * image frames that can be displayed on screen. * * **Decoding process:** * ``` * file (.mp4,.avi,.mov) * ↓ * VideoDecoder (FFmpeg) * ↓ * frame (CVPixelBuffer array) * ↓ * Metal → * ``` * * @section ffmpeg_overview FFmpeg frame * * FFmpeg use frame. * * **:** * - ****: / * - **codec **: H.264, H.265 (HEVC), VP9, AV1 * - ****: Linux, macOS, Windows, iOS, Android * - ****: (VideoToolbox, VAAPI, NVDEC) * - ****: LGPL/GPL * * **FFmpeg:** * ``` * libavformat - (MP4, AVI, MKV) * libavcodec - codec (H.264, H.265, AAC) * libavutil - * libswscale - (YUV → RGB) * libswresample - * ``` * * @section test_scope Test Scope * * 1. **decoder initialization** * - file stream information read * - / stream * - codec initialization * - error (file, file) * * 2. **frame decoding** * - frame decoding * - frame decoding * - Pixel format (YUV420p → BGRA) * - CVPixelBuffer create * * 3. ** (Seeking)** * - * - frame * - I-frame (frame) * - Seek also Verify * * 4. ** query** * - Duration read * - Frame rate query * - Confirm * * 5. **error ** * - non-existent file * - file * - codec * - decoding error * * 6. **Memory management** * - AVFrame * - AVPacket * - Context cleanup * - * * 7. **** * - decoding also * - Seek * - use * * @section codec_support codec * * ** codec:** * - H.264 (AVC) - use * - H.265 (HEVC) - * - VP9 - Google codec * - MJPEG - JPEG * * ** codec:** * - AAC - Advanced Audio Coding * - MP3 - MPEG-1/2 Audio Layer 3 * - PCM - * * @section test_limitations * * **Unit Tests ( file):** * - Mock data use * - actual file * - fast (seconds) * - error path Verify * - * * **Integration Tests (also file):** * - actual file * - actual decoding Verify * - (seconds) * - path Verify * - Scenario * * @section test_strategy Test Strategy * * actual file also decoder and error Verify. * CI/CD available. * * @note FFmpeg C, Swift (VideoDecoder) * use. Memory management. */ // // ═══════════════════════════════════════════════════════════════════════════ // VideoDecoderTests.swift // BlackboxPlayerTests // // 📋: BlackboxPlayer // 🎯 Purpose: VideoDecoder // 📝: FFmpeg video decoder functionality Verify // // ═══════════════════════════════════════════════════════════════════════════ // // 🎬 What is a video decoder? // ──────────────────────────────────────────────────────────────────────── // file Display on screen // image frames that can be displayed on screen. // // 📦 Decoding process: // ``` // file (.mp4,.avi) // ↓ // decoder (VideoDecoder) // ↓ // frame ( array) // ↓ // // ``` // // 🔧 FFmpeg? // use frame. // - / // - H.264, H.265, VP9 codec // -, macOS, Windows, iOS, Android // // 🎯 Verify: // 1. decoder initialization // 2. frame decoding (/) // 3. (Seeking) // 4. query // 5. error // 6. Memory management // 7. // ──────────────────────────────────────────────────────────────────────── // /// XCTest frame /// /// Apple frame. import XCTest /// @testable import /// /// Test target module internal. @testable import BlackboxPlayer // ═══════════════════════════════════════════════════════════════════════════ // MARK: - video decoder (Unit Tests) // ═══════════════════════════════════════════════════════════════════════════ /// VideoDecoder /// /// video decoder functionality Verify. /// /// ⚠️: /// actual file. /// error and Verify. /// /// 💡 Integration Testsand: /// ``` /// Unit Tests (VideoDecoderTests): /// - Mock data use /// - actual file /// - fast /// - error path Verify /// /// Integration Tests (VideoDecoderIntegrationTests): /// - actual file /// - actual decoding Verify /// - /// - path Verify /// ``` /// /// 🎯 Test Strategy: /// actual file also decoder and /// error Verify. final class VideoDecoderTests: XCTestCase { // ═══════════════════════════════════════════════════════════════════════ // MARK: - Properties // ═══════════════════════════════════════════════════════════════════════ /** * file path */ /** * actual non-existent path. * error use. */ /** * * @section ____implicitly_unwrapped_optional_ 📝! (Implicitly Unwrapped Optional) * setUp initialization. */ var testVideoPath: String! /** * video decoder instance */ /** * each create. */ /** * * @section nil_____ 💡 nil initialization * each method create. */ var decoder: VideoDecoder! // ═══════════════════════════════════════════════════════════════════════ // MARK: - Setup & Teardown // ═══════════════════════════════════════════════════════════════════════ /** * each initialization */ /** * XCTest each method. */ /** * * @section ______ 🎯 initialization content * 1. setUp * 2. continueAfterFailure * 3. path create */ /** * * @section continueafterfailure___false 💡 continueAfterFailure = false * assertion failure. */ /** * * @section __________ 📝? * @endcode * // continueAfterFailure = true (value) * XCTAssertNotNil(decoder) // failure! * XCTAssertTrue(decoder.isInitialized) // decoder nil! */ /** * // continueAfterFailure = false * XCTAssertNotNil(decoder) // failure! → * // → * @endcode */ /** * * @section __________ 🎬 path * "/path/to/test/video.mp4" non-existent path. * error also path. */ override func setUpWithError() throws { /** * setUp */ super.setUp() /** * failure */ /** * * @section _________ 💡 and * - true: failurealso () * - false: failure () */ continueAfterFailure = false /** * path create */ /** * * @section ________________________ ⚠️: path actual! * actual file use. */ /** * * @section _____________ 📝 path use * - file error * - initialization failure Scenario Verify */ testVideoPath = "/path/to/test/video.mp4" } /** * each cleanup */ /** * XCTest each method. */ /** * 🧹 cleanup content: * 1. decoder nil () * 2. testVideoPath nil * 3. tearDown */ /** * * @section ______ 💾 Memory management * @endcode * decoder = nil // VideoDecoder deinit * // FFmpeg also * @endcode */ /** * * @section __________ 🎯 cleanup * - FFmpeg C * - * - file cleanup * - */ override func tearDownWithError() throws { /** * decoder */ /** * VideoDecoder deinit * FFmpeg cleanup. */ decoder = nil /** * path */ testVideoPath = nil /** * tearDown */ super.tearDown() } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Initialization Tests // ═══════════════════════════════════════════════════════════════════════ /** * decoder initialization */ /** * VideoDecoder object create initial state Verify. */ /** * * @section ________ 🎯 Scenario * 1. VideoDecoder object create * 2. object nil Confirm * 3. initialization Confirm * 4. / information Confirm */ /** * * @section given_when_then___ 💡 Given-When-Then * @endcode * Given (): * When (): * Then (Verify): result Confirm * @endcode */ /** * * @section 2______ 📝 2 initialization * VideoDecoder 2 initialization: * @endcode * // 1: object create * let decoder = VideoDecoder(filePath: path) * // file */ /** * // 2: actual initialization * try decoder.initialize() * // file codec information * @endcode */ /** * @test testDecoderInitialization * @brief 🎯 2 initialization: * * @details * * @section 2__________ 🎯 2 initialization * - object create exception * - initialization failure error * - initialization ( initialization) */ func testDecoderInitialization() { /** * * @par Given-When-Then: * - <b>Given:</b> decoder create */ /** * VideoDecoder object create. * file path. */ /** * * @section testvideopath 💡 testVideoPath * setUp "/path/to/test/video.mp4" * (actual non-existent path) */ decoder = VideoDecoder(filePath: testVideoPath) /** * * @par Given-When-Then: * - <b>Then:</b> initial state Verify * * 1. decoder object create Confirm */ /** * XCTAssertNotNil: value nil Verify * failure */ XCTAssertNotNil(decoder, "Decoder should be initialized") /** * 2. initialization Confirm */ /** * isInitialized: decoder initialization Boolean */ /** * * @section ___________ 💡 initialization * - object create * - initialize() * - file * - decoding */ XCTAssertFalse(decoder.isInitialized, "Decoder should not be initialized before calling initialize()") /** * 3. information Confirm */ /** * videoInfo: stream information (also, frame) */ /** * XCTAssertNil: value nil Verify */ /** * * @section ________nil 💡 initialization nil * file information. */ XCTAssertNil(decoder.videoInfo, "Video info should be nil before initialization") /** * 4. information Confirm */ /** * audioInfo: stream information (,) */ /** * * @section ________nil 💡 initialization nil * file information. */ XCTAssertNil(decoder.audioInfo, "Audio info should be nil before initialization") } /** * non-existent file initialization */ /** * non-existent file path initialization also * error Verify. */ /** * 🚫 file: * @endcode * 1. file * 2. * 3. file * 4. * @endcode */ /** * * @section decodererror_cannotopenfile 📝 DecoderError.cannotOpenFile * FFmpeg file error. */ /** * @test testInitializeWithNonExistentFile * @brief 💡 guard case: * * @details * * @section guard_case___ 💡 guard case * Swift enum case Verify. * @endcode * if case DecoderError.cannotOpenFile = error { * // error cannotOpenFile * } else { * // error → failure * } * @endcode */ func testInitializeWithNonExistentFile() { /** * * @par Given-When-Then: * - <b>Given:</b> non-existent file path decoder create */ /** * "/nonexistent/file.mp4" also non-existent path. */ /** * * @section _________ 💡 object create success * create path file success. */ decoder = VideoDecoder(filePath: "/nonexistent/file.mp4") /** * When/Then: initialization also error Verify */ /** * initialize() actual file also. * file error. */ XCTAssertThrowsError(try decoder.initialize()) { error in /** * error Verify */ /// /** * if case: enum case Confirm */ /// /** * * @section _____ 🎯 Verify content * error DecoderError.cannotOpenFile Confirm */ if case DecoderError.cannotOpenFile = error { /** * error → success */ /// /** * * @section ____________ 💡 * Swift empty also. * " error also ". */ } else { /** * error → failure */ /// /** * XCTFail: failure */ /// /** * * @section __error_ 💡 \(error) * actual error *. */ XCTFail("Expected cannotOpenFile error, got \(error)") } } } /** * initialization */ /** * initialization decoder initialization * Verify. */ /** * * @section _______ ⚠️ * actual file *. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() // initialization */ /** * // When/Then * XCTAssertThrowsError(try decoder.initialize()) { error in * // error, * // * } * @endcode */ /** * * @section ____________ 💡 initialization * @endcode * 1: error * - error * - error */ /** * 2: * - * - ( also result) */ /** * @test testDoubleInitialization * @brief 3: initialization * * @details * 3: initialization * - initialization * - * @endcode */ func testDoubleInitialization() throws { /** * * @par Given-When-Then: * - <b>Given:</b> file decoder create (Mock) */ /** * * @section ___________________________ ⚠️: actual file * error path. * * When/Then: initialization decoder initialize() */ /** * * @section _____ 💡 * XCTAssertThrowsError(try decoder.initialize()) */ /** * * @section _________ 📝 * actual file * Integration Tests */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Decoding Tests // ═══════════════════════════════════════════════════════════════════════ /** * initialization frame decoding */ /** * decoder initialization frame decoding * error Verify. */ /** * * @section ________ 🎬 decoding * @endcode * 1. file (initialize) * 2. codec information read * 3. frame decoding (decodeNextFrame) * 4. frame read * 5. EOF (End of File) also * @endcode */ /** * * @section ____________ ⚠️ initialization decoding * - file * - codec information * - decoder * → error */ /** * @test testDecodeNextFrameWithoutInitialization * @brief 📝 DecoderError.notInitialized: * * @details * * @section decodererror_notinitialized 📝 DecoderError.notInitialized * decoder initialization * Tasks also error. */ func testDecodeNextFrameWithoutInitialization() { /** * * @par Given-When-Then: * - <b>Given:</b> initialization decoder */ /** * object create initialize(). */ decoder = VideoDecoder(filePath: testVideoPath) /** * When/Then: frame decoding also error Verify */ /** * decodeNextFrame() error. */ XCTAssertThrowsError(try decoder.decodeNextFrame()) { error in /** * error Verify */ /// /** * if case: enum case Confirm */ if case DecoderError.notInitialized = error { /** * error → success */ } else { /** * error → failure */ XCTFail("Expected notInitialized error, got \(error)") } } } /** * frame decoding */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When * let frames = try decoder.decodeNextFrame() */ /** * // Then * XCTAssertNotNil(frames.video, "Should decode video frame") * XCTAssertGreaterThan(frames.video.width, 0) * XCTAssertGreaterThan(frames.video.height, 0) * @endcode */ /** * @test testDecodeVideoFrame * @brief 🎬 frame: * * @details * * @section __________ 🎬 frame * @endcode * VideoFrame { * width: 1920 () * height: 1080 () * timestamp: 0.033 (seconds) * data: [UInt8] ( data) * format: YUV420 () * } * @endcode */ func testDecodeVideoFrame() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: decoder frame success decoding */ /** * * @section integration_tests______ 💡 Integration Tests * VideoDecoderIntegrationTests.testDecodeMultipleFrames() */ } /** * frame decoding */ /** * * @section _______ ⚠️ * actual file() Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPathWithAudio) * try decoder.initialize() */ /** * // When * let frames = try decoder.decodeNextFrame() */ /** * // Then * XCTAssertNotNil(frames.audio, "Should decode audio frame") * XCTAssertGreaterThan(frames.audio.sampleCount, 0) * @endcode */ /** * 🔊 frame: * @endcode * AudioFrame { * sampleRate: 48000 (Hz) * channels: 2 () * samples: [Float] (PCM data) * timestamp: 0.033 (seconds) * } * @endcode */ /** * @test testDecodeAudioFrame * @brief 💡: * * @details * * @section ________ 💡 * functionality *. */ func testDecodeAudioFrame() { /** * * @section ___________________________________ ⚠️: actual file * Integration Tests: decoder frame success decoding */ /** * * @section integration_tests______ 💡 Integration Tests * VideoDecoderIntegrationTests.testDecodeMultipleFrames() */ } /** * EOF decoding */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When: frame decoding * var frameCount = 0 * while let frames = try decoder.decodeNextFrame() { * frameCount += 1 * } */ /** * // Then * XCTAssertGreaterThan(frameCount, 0, "Should decode at least one frame") * XCTAssertNil(try decoder.decodeNextFrame(), "Should return nil at EOF") * @endcode */ /** * 📁 EOF (End of File): * file also data. */ /** * @test testDecodeUntilEOF * @brief 💡 EOF: * * @details * * @section eof___ 💡 EOF * - nil Return: frame * - error: () * -: */ func testDecodeUntilEOF() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: decoder file nil Return */ /** * * @section integration_tests______ 💡 Integration Tests * VideoDecoderIntegrationTests.testDecodeMultipleFrames() */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Seeking Tests // ═══════════════════════════════════════════════════════════════════════ /** * initialization */ /** * decoder initialization seek also * error Verify. */ /** * * @section seeking___ 🎯 Seeking? * @endcode * */ /** *: * - 5seconds: seek(to: 5.0) * -: + 10seconds * -: - 10seconds * @endcode */ /** * * @section seeking___ 📝 Seeking and * @endcode * 1. * 2. file frame * 3. file * 4. decoder initialization * 5. decoding * @endcode */ /** * @test testSeekWithoutInitialization * @brief ⚠️ initialization seek: * * @details * * @section _______seek__ ⚠️ initialization seek * - file * - information * - decoder * → error */ func testSeekWithoutInitialization() { /** * * @par Given-When-Then: * - <b>Given:</b> initialization decoder */ decoder = VideoDecoder(filePath: testVideoPath) /** * When/Then: also error Verify */ /** * seek(to: 5.0): 5seconds also */ XCTAssertThrowsError(try decoder.seek(to: 5.0)) { error in /** * error Verify */ if case DecoderError.notInitialized = error { /** * error → success */ } else { /** * error → failure */ XCTFail("Expected notInitialized error, got \(error)") } } } /** * */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When * try decoder.seek(to: 5.0) // 5seconds * let frames = try decoder.decodeNextFrame() */ /** * // Then * XCTAssertGreaterThanOrEqual(frames.video.timestamp, 5.0) * XCTAssertLessThan(frames.video.timestamp, 5.5) * @endcode */ /** * * @section seeking____ 💡 Seeking also * @endcode * frame(I-Frame): * -: 5.0seconds * - actual: 4.8seconds ( frame) */ /** * @test testSeekToValidTimestamp * @brief: * * @details *: * - frame * - decoding () * @endcode */ func testSeekToValidTimestamp() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: decoder */ /** * * @section integration_tests______ 💡 Integration Tests * VideoDecoderIntegrationTests.testSeekAndDecode() */ } /** * */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When * try decoder.seek(to: -5.0) // */ /** * // Then: * // 1: 0seconds () * // 2: error * // 3: * @endcode */ /** * * @section ________ 💡 * @endcode * 1: 0 (Clamping) * seek(to: -5.0) → seek(to: 0.0) * */ /** * 2: error * throw DecoderError.invalidTimestamp * error */ /** * @test testSeekToNegativeTimestamp * @brief 3: * * @details * 3: *: duration - 5.0 * * @endcode */ func testSeekToNegativeTimestamp() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: */ } /** * secondsand */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() * let duration = decoder.getDuration()! */ /** * // When * try decoder.seek(to: duration + 10.0) // secondsand */ /** * // Then: * // 1: frame * // 2: EOF * // 3: error * @endcode */ /** * * @section ________ 💡 secondsand * @endcode * 1: duration * seek(to: 100.0) → seek(to: duration) * */ /** * 2: EOF * decoding nil Return * */ /** * @test testSeekBeyondDuration * @brief 3: error * * @details * 3: error * throw DecoderError.seekOutOfRange * * @endcode */ func testSeekBeyondDuration() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: secondsand seek */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Duration Tests // ═══════════════════════════════════════════════════════════════════════ /** * initialization query */ /** * decoder initialization query * nil Return Verify. */ /** * 🕐 Duration ()? * @endcode * entire (seconds) */ /** *: * -: 10.5seconds * - 1: 60.0seconds * -: 7200.0seconds (2) * @endcode */ /** * * @section ________ 📝 * @endcode * Duration = entire frame / frame */ /** *: * 1800 frame / 30 fps = 60seconds * @endcode */ /** * @test testGetDurationWithoutInitialization * @brief 💡 initialization nil: * * @details * * @section ________nil 💡 initialization nil * file data. */ func testGetDurationWithoutInitialization() { /** * * @par Given-When-Then: * - <b>Given:</b> initialization decoder */ decoder = VideoDecoder(filePath: testVideoPath) /** * * @par Given-When-Then: * - <b>When:</b> query */ /** * getDuration(): Return * Return: Double? (Optional) */ let duration = decoder.getDuration() /** * * @par Given-When-Then: * - <b>Then:</b> nil Return Confirm */ /** * XCTAssertNil: value nil Verify */ /** * * @section ___________ 💡 initialization * - file * - data * - * → nil Return */ XCTAssertNil(duration, "Duration should be nil when decoder is not initialized") } /** * file query */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When * let duration = decoder.getDuration() */ /** * // Then * let unwrappedDuration = try XCTUnwrap(duration) * XCTAssertGreaterThan(unwrappedDuration, 0.0) * XCTAssertLessThan(unwrappedDuration, 3600.0) // 1 * @endcode */ /** * * @section ________ 💡 Verify * @endcode *: * -: 1seconds * -: 60seconds (1) * -: 300seconds (5) */ /** * @test testGetDurationWithValidFile * @brief value: * * @details * value: * - 0.0seconds: empty file * -: data * - value: file * @endcode */ func testGetDurationWithValidFile() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: decoder Return */ /** * * @section integration_tests______ 💡 Integration Tests * VideoDecoderIntegrationTests.testGetDuration() */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Error Handling Tests // ═══════════════════════════════════════════════════════════════════════ /** * file */ /** * * @section _______ ⚠️ * file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given: file * let decoder = VideoDecoder(filePath: corruptedPath) */ /** * // When/Then * XCTAssertThrowsError(try decoder.initialize()) { error in * // error Confirm * if case DecoderError.corruptedFile = error { * // error * } * } * @endcode */ /** * 🚫 file: * @endcode * 1. complete load * - file */ /** * 2. error * - SD * - */ /** * 3. file * - data * - inode */ /** * 4. error * - create * @endcode */ /** * * @section ________ 💡 * @endcode * FFmpeg file: * - * - complete frame * - * - EOF * @endcode */ /** * 🔧 error: * @endcode * 1. * - */ /** * 2. error * - frame */ /** * 3. file load * - */ /** * @test testHandleCorruptedFile * @brief 4. use * * @details * 4. use * - error * @endcode */ func testHandleCorruptedFile() { /** * * @section ____________________________ ⚠️: file * Integration Tests: decoder file error */ } /** * codec */ /** * * @section _______ ⚠️ * codec file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given: codec file * let decoder = VideoDecoder(filePath: unsupportedCodecPath) */ /** * // When/Then * XCTAssertThrowsError(try decoder.initialize()) { error in * if case DecoderError.codecNotFound = error { * // error * } * } * @endcode */ /** * * @section _________ 🎬 codec? * @endcode * / */ /** * codec: * - H.264 (AVC): use * - H.265 (HEVC): * - VP9: Google codec * - AV1: codec */ /** * codec: * - codec () * - codec * - codec * @endcode */ /** * * @section ________ 💡 codec Confirm * @endcode * FFmpeg codec, * use */ /** *: * - iOS: H.264, H.265 * - Android: * - Desktop: * @endcode */ /** * 🔧: * @endcode * 1. codec (Transcoding) * - H.264 codec */ /** * 2. decoding * - */ /** * @test testHandleInvalidCodec * @brief 3. use * * @details * 3. use * - " " * @endcode */ func testHandleInvalidCodec() { /** * * @section ____________________________________ ⚠️: codec file * Integration Tests: decoder codecNotFound error */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Memory Management Tests // ═══════════════════════════════════════════════════════════════════════ /** * deinit cleanup */ /** * VideoDecoder * FFmpeg cleanup Verify. */ /** * * @section ffmpeg____ 💾 FFmpeg * @endcode * VideoDecoder: */ /** * 1. AVFormatContext * - file information */ /** * 2. AVCodecContext * - codec information */ /** * 3. AVFrame * - decoding frame */ /** * 4. AVPacket * - data */ /** * 5. SwsContext * - * @endcode */ /** * * @section ______________ 🎯 cleanup * @endcode * FFmpeg C: * - Swift ARC * - * - */ /** *: * 10MB 100 * → cleanup 1GB! * @endcode */ /** * * @section ____________ 🔍 Confirm * @endcode * 1. Xcode Instruments * - Leaks also use * - Allocations */ /** * 2. * - measure { } * - Confirm */ /** * 3. * - file * - use * @endcode */ /** * * @section _____ 💡 cleanup * @endcode * deinit { * // 1. SwsContext * if swsContext!= nil { * sws_freeContext(swsContext) * } */ /** * // 2. AVFrame * if frame!= nil { * av_frame_free(&frame) * } */ /** * // 3. AVCodecContext * if codecContext!= nil { * avcodec_free_context(&codecContext) * } */ /** * @test testCleanupOnDeinit * @brief // 4. AVFormatContext * * @details * // 4. AVFormatContext * if formatContext!= nil { * avformat_close_input(&formatContext) * } * } * @endcode */ func testCleanupOnDeinit() { /** * * @par Given-When-Then: * - <b>Given:</b> decoder create */ decoder = VideoDecoder(filePath: testVideoPath) /** * * @par Given-When-Then: * - <b>When:</b> nil */ /** * Swift ARC deinit. */ /** * * @section ______ 💡 * @endcode * decoder = VideoDecoder(...) // RefCount = 1 * decoder = nil // RefCount = 0 → deinit * @endcode */ decoder = nil /** * * @par Given-When-Then: * - <b>Then:</b> decoder cleanup */ /** * * @section __ ⚠️ * Verify. * Xcode Instruments use Confirm. */ /** * * @section _____ 📝 Verify * 1. Product → Profile (Cmd+I) * 2. Leaks also * 3. * 4. Confirm */ } /** * decoder use */ /** * * @section _______ ⚠️ * actual file Integration Tests. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given: decoder create * let decoder1 = VideoDecoder(filePath: path1) * let decoder2 = VideoDecoder(filePath: path2) * let decoder3 = VideoDecoder(filePath: path3) */ /** * // When: initialization * try decoder1.initialize() * try decoder2.initialize() * try decoder3.initialize() */ /** * // Then: independently * let frame1 = try decoder1.decodeNextFrame() * let frame2 = try decoder2.decodeNextFrame() * let frame3 = try decoder3.decodeNextFrame() */ /** * XCTAssertNotEqual(frame1.timestamp, frame2.timestamp) * @endcode */ /** * * @section __________ 🎯 use Scenario * @endcode *: * - front decoder * - rear decoder * - side decoder * → 3 decoder * @endcode */ /** * * @section ______ 💡 * @endcode * each decoder: * - also file * - also decoder * - also frame */ /** *: * - decoder1 seek decoder2 * - decoder2 frame decoder3and * @endcode */ /** * * @section ________ ⚠️ * @endcode * decoder use: * - use (eacheach 10-50MB) * - CPU (decoding CPU) * - */ /** * @test testMultipleDecodersSimultaneously * @brief: * * @details *: * - use * - decoding * - * @endcode */ func testMultipleDecodersSimultaneously() { /** * * @section ___________________________ ⚠️: actual file * Integration Tests: decoder independently */ } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Performance Tests // ═══════════════════════════════════════════════════════════════════════ /** * decoding */ /** * * @section _______ ⚠️ * actual file. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When/Then: 100 frame decoding * measure { * for _ in 0..<100 { * _ = try? decoder.decodeNextFrame() * } * } * @endcode */ /** * * @section _____ 📊 * @endcode *: * - 30 fps: frame 33ms * - 60 fps: frame 16ms */ /** *: * 1920x1080 H.264 * - decoding: 10-20ms/frame * -: 2-5ms/frame * @endcode */ /** * 🚀: * @endcode * 1. * - VideoToolbox (iOS/macOS) * - MediaCodec (Android) * - 10 */ /** * 2. * - FFmpeg * - decoding */ /** * 3. frame * - I-Frame decoding * - 10 fast */ /** * 4. * - frame decoding * - * @endcode */ /** * @test testDecodingPerformance * @brief 💡 measure { }: * * @details * * @section measure_______ 💡 measure { } * XCTest 10. */ func testDecodingPerformance() { /** * * @section ___________________________ ⚠️: actual file *: frame decoding */ measure { /** * 100 frame decoding Performance measurement */ /// /** * * @section _____ 💡 actual * @endcode * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() * for _ in 0..<100 { * _ = try decoder.decodeNextFrame() * } * @endcode */ } } /** * */ /** * * @section _______ ⚠️ * actual file. */ /** * * @section ___________ 📝 Verify content * @endcode * // Given * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() */ /** * // When/Then: seek * measure { * for i in 0..<10 { * try? decoder.seek(to: Double(i * 5)) * } * } * @endcode */ /** * * @section _____ 📊 * @endcode * use: * - seek: 100-200ms * - fast seek: 50ms */ /** *: * - () * - frame (GOP size) * - also (SSD vs HDD) * @endcode */ /** * * @section seeking_______ 🎯 Seeking * @endcode * 1. frame * - file * - */ /** * 2. file I/O * - data read * - SD */ /** * 3. initialization * - decoder * - */ /** * 4. * - frame decoding * - also vs also * @endcode */ /** * 🚀 Seeking: * @endcode * 1. frame * - frame * - fast */ /** * 2. * - frame * - also also */ /** * 3. load * - frame load * - use */ /** * @test testSeekingPerformance * @brief 4. * * @details * 4. * - GPU fast decoding * @endcode */ func testSeekingPerformance() { /** * * @section ___________________________ ⚠️: actual file *: */ measure { /** * seek Performance measurement */ /// /** * * @section _____ 💡 actual * @endcode * let decoder = VideoDecoder(filePath: validPath) * try decoder.initialize() * for i in 0..<10 { * try decoder.seek(to: Double(i * 5)) * } * @endcode */ } } } // ═══════════════════════════════════════════════════════════════════════════ // MARK: - Integration Tests // ═══════════════════════════════════════════════════════════════════════════ /// video decoder Integration Tests /// /// actual file use decoder entire functionality Verify. /// /// 🎯 Unit Tests vs Integration Tests: /// ``` /// Unit Tests (VideoDecoderTests): /// - Mock data use /// - fast (seconds) /// - error path Verify /// - actual file /// - CI/CD /// /// Integration Tests (this class): /// - actual file use /// - () /// - path Verify /// - file /// - /// ``` /// /// ⚠️: /// test_video.mp4 file. /// file XCTSkip. /// /// 📦 file: /// ``` /// 1. Xcode /// 2. Build Phases → Copy Bundle Resources /// 3. test_video.mp4 /// ``` /// /// 💡 file: /// -: MP4 (H.264 codec) /// -: 10-60seconds /// - also: 1920x1080 1280x720 /// - frame: 30 fps /// -: final class VideoDecoderIntegrationTests: XCTestCase { // ═══════════════════════════════════════════════════════════════════════ // MARK: - Properties // ═══════════════════════════════════════════════════════════════════════ /** * video decoder instance */ var decoder: VideoDecoder! /** * file path */ /** * setUp actual file path. */ var testVideoPath: String! // ═══════════════════════════════════════════════════════════════════════ // MARK: - Setup & Teardown // ═══════════════════════════════════════════════════════════════════════ /** * each initialization */ /** * actual file path. */ /** * 📦 Bundle? * @endcode * (,) */ /** *: * TestBundle.xctest/ * ├── Info.plist * ├── TestExecutable * └── Resources/ * └── test_video.mp4 ← * @endcode */ /** * * @section bundle_for__type_of__self__ 💡 Bundle(for: type(of: self)) *. */ /** * * @section path_forresource_oftype__ 🔍 path(forResource:ofType:) * @endcode * bundle.path(forResource: "test_video", ofType: "mp4") * // Return: Optional<String> * // success: "/path/to/bundle/test_video.mp4" * // failure: nil (file) * @endcode */ /** * * @section xctskip ⚠️ XCTSkip * @endcode * throw XCTSkip("message") * // failure * // CI/CD file * @endcode */ override func setUpWithError() throws { /** * setUp */ super.setUp() /** * file path */ /** * * @section _____ 💡 and * 1. * 2. "test_video.mp4" file * 3. file XCTSkip * * */ /** * Bundle(for:) Return. */ let bundle = Bundle(for: type(of: self)) /** * file path */ /** * guard let: Optional * failure else */ guard let videoPath = bundle.path(forResource: "test_video", ofType: "mp4") else { /** * file */ /// /** * XCTSkip: failure */ /// /** * * @section _____ 💡 use * - * - CI/CD * - */ throw XCTSkip("Test video file not found. Add test_video.mp4 to test bundle.") } /** * path decoder create */ testVideoPath = videoPath decoder = VideoDecoder(filePath: testVideoPath) } /** * each cleanup */ /** * decoderand path nil. */ override func tearDownWithError() throws { /** * decoder */ decoder = nil /** * path */ testVideoPath = nil /** * tearDown */ super.tearDown() } // ═══════════════════════════════════════════════════════════════════════ // MARK: - Integration Tests // ═══════════════════════════════════════════════════════════════════════ /** * file initialization */ /** * actual file use decoder initialization * information correctly Verify. */ /** * * @section _____ 🎯 Verify * 1. initialization success * 2. isInitialized true * 3. videoInfo * 4. also information (width, height > 0) * 5. frame information (frameRate > 0) */ /** * @test testInitializeWithValidFile * @brief 📊 information: * * @details * * @section ___________ 📊 information * @endcode * width: 1920 (Full HD) * height: 1080 * frameRate: 30.0 (fps) * codec: "h264" * bitrate: 5000000 (5 Mbps) * @endcode */ func testInitializeWithValidFile() throws { /** * * @par Given-When-Then: * - <b>When:</b> decoder initialization */ /** * initialize() file data. */ try decoder.initialize() /** * * @par Given-When-Then: * - <b>Then:</b> initialization Verify * * 1. initialization Confirm */ XCTAssertTrue(decoder.isInitialized, "Decoder should be initialized") /** * 2. information Confirm */ XCTAssertNotNil(decoder.videoInfo, "Video info should be available") /** * 3. information Verify */ /** * XCTUnwrap: Optional * nil failure */ let videoInfo = try XCTUnwrap(decoder.videoInfo) /** * 4. also Verify */ /** * widthand height. * 0 file. */ XCTAssertGreaterThan(videoInfo.width, 0, "Video width should be positive") XCTAssertGreaterThan(videoInfo.height, 0, "Video height should be positive") /** * 5. frame Verify */ /** * frameRate. * 24, 30, 60 fps. */ XCTAssertGreaterThan(videoInfo.frameRate, 0, "Frame rate should be positive") } /** * frame decoding */ /** * actual file frame decoding * decoder normally Verify. */ /** * * @section ________ 🎯 Scenario * 1. decoder initialization * 2. 100 frame decoding * 3. / frame * 4. 1 frame Confirm */ /** * * @section while_let___ 💡 while let * @endcode * while let frames = try decoder.decodeNextFrame() { * // frames nil * // EOF also nil Return → * } * @endcode */ /** * @test testDecodeMultipleFrames * @brief 📊 Expected Result: * * @details * * @section _____ 📊 Expected Result * @endcode * 30 fps, 100 frame: * - videoFrameCount: 100 * - audioFrameCount: 100 () * -: 3.33seconds * @endcode */ func testDecodeMultipleFrames() throws { /** * * @par Given-When-Then: * - <b>Given:</b> decoder initialization */ try decoder.initialize() /** * * @par Given-When-Then: * - <b>When:</b> frame decoding */ /** * frame initialization */ var frameCount = 0 // entire frame var videoFrameCount = 0 // frame var audioFrameCount = 0 // frame /** * frame decoding */ /** * while let: Optional and * decodeNextFrame() nil Return */ while let frames = try decoder.decodeNextFrame() { /** * frame Confirm */ /// /** * frames.video nil frame */ if frames.video!= nil { videoFrameCount += 1 } /** * frame Confirm */ /// /** * frames.audio nil frame *. */ if frames.audio!= nil { audioFrameCount += 1 } /** * entire frame */ frameCount += 1 /** * 100 decoding */ /// /** * * @section _________ 💡 * - * - * - 100 frame functionality Verify */ if frameCount >= 100 { break } } /** * * @par Given-When-Then: * - <b>Then:</b> result Verify */ /** * 1 frame decoding. */ XCTAssertGreaterThan(videoFrameCount, 0, "Should decode at least one video frame") /** * information */ /** * print: * Confirm. */ /** * * @section ______ 💡 information * - frame * - frame * - Confirm */ print("Decoded \(videoFrameCount) video frames and \(audioFrameCount) audio frames") } /** * decoding */ /** * seek frame decoding * seek functionality normally Verify. */ /** * * @section ________ 🎯 Scenario * 1. decoder initialization * 2. 5seconds * 3. frame decoding * 4. 5seconds Confirm */ /** * * @section seeking____ 💡 Seeking also * @endcode *: 5.0seconds * actual: 4.8seconds ~ 5.2seconds */ /** * @test testSeekAndDecode * @brief: * * @details *: * - frame(I-Frame) * - frame * - decoding * @endcode */ func testSeekAndDecode() throws { /** * * @par Given-When-Then: * - <b>Given:</b> decoder initialization */ try decoder.initialize() /** * * @par Given-When-Then: * - <b>When:</b> 5seconds */ /** * seek(to:): (seconds) */ try decoder.seek(to: 5.0) /** * frame decoding */ /** * seek frame decoding. */ let frames = try decoder.decodeNextFrame() /** * * @par Given-When-Then: * - <b>Then:</b> result Verify * * 1. frame decoding Confirm */ /** * seek also normally decoding. */ XCTAssertNotNil(frames, "Should be able to decode after seeking") /** * 2. Confirm */ /** * if let: Optional * videoFrame nil */ if let videoFrame = frames?.video { /** * seek Confirm */ /// /** * XCTAssertGreaterThanOrEqual: value >= value */ /// /** * * @section _________ 💡 ""? * - frame 5.0seconds * - 4.8seconds frame 5.0seconds decoding * - 5.2seconds frame */ XCTAssertGreaterThanOrEqual(videoFrame.timestamp, 5.0, "Frame timestamp should be at or after seek point") } } /** * query */ /** * actual file query * duration functionality normally Verify. */ /** * * @section ________ 🎯 Scenario * 1. decoder initialization * 2. query * 3. Confirm * 4. */ /** * * @section __________ 📊 * @endcode *: * - 1: 60.0seconds * - 5: 300.0seconds */ /** * @test testGetDuration * @brief: * * @details *: * -: 10-30seconds * - * @endcode */ func testGetDuration() throws { /** * * @par Given-When-Then: * - <b>Given:</b> decoder initialization */ try decoder.initialize() /** * * @par Given-When-Then: * - <b>When:</b> query */ /** * getDuration(): entire Return (seconds) * Return: Double? */ let duration = decoder.getDuration() /** * * @par Given-When-Then: * - <b>Then:</b> result Verify * * 1. Confirm */ /** * XCTUnwrap: Optional * nil failure */ let unwrappedDuration = try XCTUnwrap(duration) /** * 2. Confirm */ /** * 0. * 0 empty file file. */ XCTAssertGreaterThan(unwrappedDuration, 0, "Duration should be positive") /** * 3. */ /** * print: information * Confirm. */ /** * 💡 information * - * - Note */ print("Video duration: \(unwrappedDuration) seconds") } } 